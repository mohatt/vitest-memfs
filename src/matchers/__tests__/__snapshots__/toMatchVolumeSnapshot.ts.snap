// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`toMatchVolumeSnapshot() > unit > 'binary mismatch' [existing] > result 1`] = `
{
  "actual": BinaryFile {
    "hash": "84a8811d7cd58ccbe862c1f94a00366c12440816",
    "length": 100000,
    "preview": "u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7s=...u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7u7s=",
  },
  "expected": BinaryFile {
    "hash": "cd561c0d1e53dbd0cd390f4b2cd3728db7dd71fc",
    "length": 100000,
    "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=",
  },
  "message": "Found file content mismatch at \`/data.bin\`",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'different files' [write] > disk-snapshot 1`] = `
{
  "/.gitignore": [
    "file",
    "",
  ],
  "/bin.dat": [
    "file",
    "3q2+7w==",
  ],
  "/index-link.js": [
    "symlink",
    "/src/index.js",
  ],
  "/logs": null,
  "/src/index.js": [
    "file",
    "Ly8gaGk=",
  ],
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'different files' [write] > result 1`] = `
{
  "message": "Created snapshot at different-files",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty dir match' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty dir vs missing dir' [existing] > result 1`] = `
{
  "actual": [
    "/empty",
  ],
  "expected": [
    "/",
  ],
  "message": "Directory structure didnâ€™t match",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty dir' [write] > disk-snapshot 1`] = `
{
  "/empty": null,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty dir' [write] > result 1`] = `
{
  "message": "Created snapshot at empty-dir",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty volume' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty volume' [write] > disk-snapshot 1`] = `
{
  "/": null,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'empty volume' [write] > result 1`] = `
{
  "message": "Created snapshot at empty-volume",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'force no update' [write] > disk-snapshot 1`] = `"Error: ENOENT"`;

exports[`toMatchVolumeSnapshot() > unit > 'force no update' [write] > result 1`] = `
{
  "message": "Snapshot directory \`force-no-update\` does not exist",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'force update' [existing] > disk-snapshot 1`] = `
{
  "/foo.txt": [
    "file",
    "aGk=",
  ],
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'force update' [existing] > result 1`] = `
{
  "message": "Updated snapshot at empty-dir",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'force update' [write] > disk-snapshot 1`] = `
{
  "/foo.txt": [
    "file",
    "aGk=",
  ],
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'force update' [write] > result 1`] = `
{
  "message": "Created snapshot at force-update",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'invalid volume' [existing] > disk-snapshot 1`] = `
{
  "/": null,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'invalid volume' [existing] > result 1`] = `
{
  "actual": "invalid",
  "expected": Volume {},
  "message": "Expected received("invalid") to be a memfs Volume instance",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'invalid volume' [write] > disk-snapshot 1`] = `"Error: ENOENT"`;

exports[`toMatchVolumeSnapshot() > unit > 'invalid volume' [write] > result 1`] = `
{
  "actual": "invalid",
  "expected": Volume {},
  "message": "Expected received("invalid") to be a memfs Volume instance",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'prefix option' [write] > disk-snapshot 1`] = `
{
  "/foo.txt": [
    "file",
    "aGk=",
  ],
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'prefix option' [write] > result 1`] = `
{
  "message": "Created snapshot at prefix-option",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects contentMatch=ignore option' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects listMatch=ignore-extra option (mismatch)' [existing] > result 1`] = `
{
  "actual": [
    "/foo.txt",
  ],
  "expected": [
    "/bar.txt",
    "/foo.txt",
    "/link.txt",
  ],
  "message": "Volume is missing 2 expected files",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects listMatch=ignore-extra option' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects listMatch=ignore-missing option (mismatch)' [existing] > result 1`] = `
{
  "actual": [
    "/extra.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "Volume has 1 unexpected file",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects listMatch=ignore-missing option' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects prefix option (mismatch)' [existing] > result 1`] = `
{
  "actual": File {
    "data": "hiz",
  },
  "expected": File {
    "data": "hi",
  },
  "message": "Found file content mismatch at \`/src/foo.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects prefix option' [existing] > result 1`] = `
{
  "message": "Volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects report=all option (with ignore-extra)' [existing] > result 1`] = `
{
  "actual": {
    "/foo.txt": {},
  },
  "expected": {
    "/bar.txt": File {
      "data": "hey",
    },
    "/foo.txt": {},
    "/link.txt": Symlink {
      "target": "/target1.txt",
    },
  },
  "message": "Found 2 missing paths",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects report=all option (with ignore-missing)' [existing] > result 1`] = `
{
  "actual": {
    "/extra.txt": File {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "expected": {
    "/foo.txt": {},
  },
  "message": "Found 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'respects report=all option' [existing] > result 1`] = `
{
  "actual": {
    "/extra.txt": File {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "expected": {
    "/bar.txt": File {
      "data": "hey",
    },
    "/foo.txt": {},
    "/link.txt": Symlink {
      "target": "/target1.txt",
    },
  },
  "message": "Found 3 mismatches: 2 missing paths, 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolumeSnapshot() > unit > 'symlink target mismatch' [existing] > result 1`] = `
{
  "actual": Symlink {
    "target": "/target2.txt",
  },
  "expected": Symlink {
    "target": "/target1.txt",
  },
  "message": "Found symlink target mismatch at \`/link.txt\`",
  "pass": false,
}
`;
