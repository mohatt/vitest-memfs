// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`toMatchVolume() > integration > 'binary files mismatch' 1`] = `[Error: binary mismatch in file \`/bin.dat\`]`;

exports[`toMatchVolume() > integration > 'content mismatch' 1`] = `[Error: mismatch in file \`/foo.txt\`]`;

exports[`toMatchVolume() > integration > 'empty dir vs missing dir' 1`] = `[Error: directory structure didn’t match]`;

exports[`toMatchVolume() > integration > 'extra file' 1`] = `[Error: directory structure didn’t match]`;

exports[`toMatchVolume() > integration > 'large binary file mismatch' 1`] = `[Error: binary mismatch in file \`/big.bin\`]`;

exports[`toMatchVolume() > integration > 'missing file' 1`] = `[Error: directory structure didn’t match]`;

exports[`toMatchVolume() > integration > 'not: identical files' 1`] = `[Error: volumes matched]`;

exports[`toMatchVolume() > integration > 'symlink target mismatch' 1`] = `[Error: symlink target mismatch at \`/link.txt\`]`;

exports[`toMatchVolume() > unit > 'binary files match' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'binary files mismatch' 1`] = `
{
  "actual": Binary {
    "preview": "3q2+7w==",
    "sha1": "d78f8bb992a56a597f6c7a1fb918bb78271367eb",
    "size": 4,
  },
  "expected": Binary {
    "preview": "yv66vg==",
    "sha1": "1465dad126d32bf7aa5d3b95a5c7c331cdff34df",
    "size": 4,
  },
  "message": "binary mismatch in file \`/bin.dat\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'content mismatch' 1`] = `
{
  "actual": "hello",
  "expected": "world",
  "message": "mismatch in file \`/foo.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'empty dir vs missing dir' 1`] = `
{
  "actual": [
    "/empty",
  ],
  "expected": [
    "/",
  ],
  "message": "directory structure didn’t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'empty directories match' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'extra file' 1`] = `
{
  "actual": [
    "/bar.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "directory structure didn’t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'identical files' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'large binary file mismatch' 1`] = `
{
  "actual": Binary {
    "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==",
    "sha1": "cd561c0d1e53dbd0cd390f4b2cd3728db7dd71fc",
    "size": 100000,
  },
  "expected": Binary {
    "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqg==",
    "sha1": "814bf2767d4339019bf26a4d3a35066ad9c0f6c7",
    "size": 100000,
  },
  "message": "binary mismatch in file \`/big.bin\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'missing file' 1`] = `
{
  "actual": [
    "/foo.txt",
  ],
  "expected": [
    "/bar.txt",
    "/foo.txt",
  ],
  "message": "directory structure didn’t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: content mismatch' 1`] = `
{
  "actual": "hello",
  "expected": "world",
  "message": "mismatch in file \`/foo.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: extra file' 1`] = `
{
  "actual": [
    "/bar.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "directory structure didn’t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: identical files' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-extra option' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-missing option' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects prefix option' 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'same ref (singleton vol)' 1`] = `
{
  "message": "volumes matched by reference",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'symlink target mismatch' 1`] = `
{
  "actual": "/target1.txt",
  "expected": "/target2.txt",
  "message": "symlink target mismatch at \`/link.txt\`",
  "pass": false,
}
`;
