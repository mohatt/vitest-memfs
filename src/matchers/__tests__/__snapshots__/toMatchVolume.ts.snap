// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`toMatchVolume() > integration > 'binary files mismatch' 1`] = `[Error: mismatch in file \`/bin.dat\`]`;

exports[`toMatchVolume() > integration > 'content mismatch' 1`] = `[Error: mismatch in file \`/foo.txt\`]`;

exports[`toMatchVolume() > integration > 'empty dir vs missing dir' 1`] = `[Error: directory structure didnâ€™t match]`;

exports[`toMatchVolume() > integration > 'extra file' 1`] = `[Error: directory structure didnâ€™t match]`;

exports[`toMatchVolume() > integration > 'invalid object type (expected)' 1`] = `[TypeError: You must provide a memfs Volume instance or plain JSON object to [2mexpect([22m[31mreceived[39m[2m).[22mtoMatchVolume[2m([22m[32mexpected[39m[2m)[22m, not \`object\`.]`;

exports[`toMatchVolume() > integration > 'invalid type (expected)' 1`] = `[TypeError: You must provide a memfs Volume instance or plain JSON object to [2mexpect([22m[31mreceived[39m[2m).[22mtoMatchVolume[2m([22m[32mexpected[39m[2m)[22m, not \`string\`.]`;

exports[`toMatchVolume() > integration > 'invalid type (received)' 1`] = `[Error: expected [31m"invalid"[39m to be a memfs Volume instance]`;

exports[`toMatchVolume() > integration > 'large binary file mismatch' 1`] = `[Error: mismatch in file \`/big.bin\`]`;

exports[`toMatchVolume() > integration > 'missing file' 1`] = `[Error: directory structure didnâ€™t match]`;

exports[`toMatchVolume() > integration > 'not: identical files' 1`] = `[Error: volumes matched]`;

exports[`toMatchVolume() > integration > 'respects ignore-extra option (mismatch)' 1`] = `[Error: volume is missing 1 expected file]`;

exports[`toMatchVolume() > integration > 'respects ignore-missing option (mismatch)' 1`] = `[Error: volume has 1 unexpected file]`;

exports[`toMatchVolume() > integration > 'symlink target mismatch' 1`] = `[Error: symlink target mismatch at \`/link.txt\`]`;

exports[`toMatchVolume() > unit > 'accepts json input' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'accepts json input' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'binary files match' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'binary files match' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'binary files mismatch' > result 1`] = `
{
  "actual": BinaryFile {
    "hash": "d78f8bb992a56a597f6c7a1fb918bb78271367eb",
    "length": 4,
    "preview": "3q2+7w==...3q2+7w==",
  },
  "expected": BinaryFile {
    "hash": "1465dad126d32bf7aa5d3b95a5c7c331cdff34df",
    "length": 4,
    "preview": "yv66vg==...yv66vg==",
  },
  "message": "mismatch in file \`/bin.dat\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'binary files mismatch' > result-full 1`] = `
{
  "actual": {
    "/bin.dat": BinaryFile {
      "hash": "d78f8bb992a56a597f6c7a1fb918bb78271367eb",
      "length": 4,
      "preview": "3q2+7w==...3q2+7w==",
    },
  },
  "expected": {
    "/bin.dat": BinaryFile {
      "hash": "1465dad126d32bf7aa5d3b95a5c7c331cdff34df",
      "length": 4,
      "preview": "yv66vg==...yv66vg==",
    },
  },
  "message": "Found 1 mismatched content",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'content mismatch' > result 1`] = `
{
  "actual": TextFile {
    "data": "hello",
  },
  "expected": TextFile {
    "data": "world",
  },
  "message": "mismatch in file \`/foo.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'content mismatch' > result-full 1`] = `
{
  "actual": {
    "/foo.txt": TextFile {
      "data": "hello",
    },
  },
  "expected": {
    "/foo.txt": TextFile {
      "data": "world",
    },
  },
  "message": "Found 1 mismatched content",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'empty dir vs missing dir' > result 1`] = `
{
  "actual": [
    "/empty",
  ],
  "expected": [
    "/",
  ],
  "message": "directory structure didnâ€™t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'empty dir vs missing dir' > result-full 1`] = `
{
  "actual": {
    "/empty": Directory {},
  },
  "expected": {
    "/": Directory {},
  },
  "message": "Found 2 mismatches: 1 missing path, 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'empty directories match' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'empty directories match' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'extra file' > result 1`] = `
{
  "actual": [
    "/bar.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "directory structure didnâ€™t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'extra file' > result-full 1`] = `
{
  "actual": {
    "/bar.txt": TextFile {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "expected": {
    "/foo.txt": {},
  },
  "message": "Found 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'identical files' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'identical files' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'invalid object type (expected)' > result 1`] = `[TypeError: You must provide a memfs Volume instance or plain JSON object to hint(toMatchVolume), not \`object\`.]`;

exports[`toMatchVolume() > unit > 'invalid type (expected)' > result 1`] = `[TypeError: You must provide a memfs Volume instance or plain JSON object to hint(toMatchVolume), not \`string\`.]`;

exports[`toMatchVolume() > unit > 'invalid type (received)' > result 1`] = `
{
  "actual": "invalid",
  "expected": Volume {},
  "message": "expected received("invalid") to be a memfs Volume instance",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'large binary file mismatch' > result 1`] = `
{
  "actual": BinaryFile {
    "hash": "cd561c0d1e53dbd0cd390f4b2cd3728db7dd71fc",
    "length": 100000,
    "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=",
  },
  "expected": BinaryFile {
    "hash": "814bf2767d4339019bf26a4d3a35066ad9c0f6c7",
    "length": 100000,
    "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=",
  },
  "message": "mismatch in file \`/big.bin\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'large binary file mismatch' > result-full 1`] = `
{
  "actual": {
    "/big.bin": BinaryFile {
      "hash": "cd561c0d1e53dbd0cd390f4b2cd3728db7dd71fc",
      "length": 100000,
      "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=",
    },
  },
  "expected": {
    "/big.bin": BinaryFile {
      "hash": "814bf2767d4339019bf26a4d3a35066ad9c0f6c7",
      "length": 100000,
      "preview": "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=...qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo=",
    },
  },
  "message": "Found 1 mismatched content",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'missing file' > result 1`] = `
{
  "actual": [
    "/foo.txt",
  ],
  "expected": [
    "/bar.txt",
    "/foo.txt",
  ],
  "message": "directory structure didnâ€™t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'missing file' > result-full 1`] = `
{
  "actual": {
    "/foo.txt": {},
  },
  "expected": {
    "/bar.txt": TextFile {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "message": "Found 1 missing path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: content mismatch' > result 1`] = `
{
  "actual": TextFile {
    "data": "hello",
  },
  "expected": TextFile {
    "data": "world",
  },
  "message": "mismatch in file \`/foo.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: content mismatch' > result-full 1`] = `
{
  "actual": {
    "/foo.txt": TextFile {
      "data": "hello",
    },
  },
  "expected": {
    "/foo.txt": TextFile {
      "data": "world",
    },
  },
  "message": "Found 1 mismatched content",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: extra file' > result 1`] = `
{
  "actual": [
    "/bar.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "directory structure didnâ€™t match",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: extra file' > result-full 1`] = `
{
  "actual": {
    "/bar.txt": TextFile {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "expected": {
    "/foo.txt": {},
  },
  "message": "Found 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'not: identical files' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'not: identical files' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-extra option (mismatch)' > result 1`] = `
{
  "actual": [
    "/foo.txt",
  ],
  "expected": [
    "/bar.txt",
    "/foo.txt",
  ],
  "message": "volume is missing 1 expected file",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-extra option (mismatch)' > result-full 1`] = `
{
  "actual": {
    "/foo.txt": {},
  },
  "expected": {
    "/bar.txt": TextFile {
      "data": "hey",
    },
    "/foo.txt": {},
  },
  "message": "Found 1 missing path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-extra option' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-extra option' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-missing option (mismatch)' > result 1`] = `
{
  "actual": [
    "/extra.txt",
    "/foo.txt",
  ],
  "expected": [
    "/foo.txt",
  ],
  "message": "volume has 1 unexpected file",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-missing option (mismatch)' > result-full 1`] = `
{
  "actual": {
    "/extra.txt": TextFile {
      "data": "extra",
    },
    "/foo.txt": {},
  },
  "expected": {
    "/foo.txt": {},
  },
  "message": "Found 1 unexpected path",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-missing option' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects ignore-missing option' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects prefix option' > result 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'respects prefix option' > result-full 1`] = `
{
  "message": "volumes matched",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'same ref (singleton vol)' > result 1`] = `
{
  "message": "volumes matched by reference",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'same ref (singleton vol)' > result-full 1`] = `
{
  "message": "volumes matched by reference",
  "pass": true,
}
`;

exports[`toMatchVolume() > unit > 'symlink target mismatch' > result 1`] = `
{
  "actual": Symlink {
    "target": "/target1.txt",
  },
  "expected": Symlink {
    "target": "/target2.txt",
  },
  "message": "symlink target mismatch at \`/link.txt\`",
  "pass": false,
}
`;

exports[`toMatchVolume() > unit > 'symlink target mismatch' > result-full 1`] = `
{
  "actual": {
    "/link.txt": Symlink {
      "target": "/target1.txt",
    },
  },
  "expected": {
    "/link.txt": Symlink {
      "target": "/target2.txt",
    },
  },
  "message": "Found 1 mismatched content",
  "pass": false,
}
`;
